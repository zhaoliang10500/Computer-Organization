
P:/G66_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	ec 0f 00 00 f8 0f 00 00 04 10 00 00 10 10 00 00     ................
  30:	1c 10 00 00 2c 14 00 00 94 0e 00 00 28 10 00 00     ....,.......(...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0004bb 	bl	13c8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001514 	.word	0x00001514

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001950 	.word	0x00001950

00000124 <__cs3_heap_start_ptr>:
     124:	00001978 	.word	0x00001978

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001958 	.word	0x00001958
     170:	0000195b 	.word	0x0000195b
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001958 	.word	0x00001958
     1bc:	00001958 	.word	0x00001958
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001958 	.word	0x00001958
     200:	00000000 	.word	0x00000000
     204:	000014b8 	.word	0x000014b8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000014b8 	.word	0x000014b8
     250:	0000195c 	.word	0x0000195c
     254:	00001518 	.word	0x00001518
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/int_setup.h"
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/pushbutton.h"
int main(){ 
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd038 	sub	sp, sp, #56	; 0x38
	}
//*/

//Part 3: Polling ----------------------------------------------------------------------------------------------------------------

	int ms = 0;
     268:	e3a03000 	mov	r3, #0
     26c:	e50b3008 	str	r3, [r11, #-8]
	int ms_display = 0;
     270:	e3a03000 	mov	r3, #0
     274:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int sec = 0;
     278:	e3a03000 	mov	r3, #0
     27c:	e50b300c 	str	r3, [r11, #-12]
	int sec_display = 0;
     280:	e3a03000 	mov	r3, #0
     284:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	int min= 0;
     288:	e3a03000 	mov	r3, #0
     28c:	e50b3010 	str	r3, [r11, #-16]
	int min_display = 0;
     290:	e3a03000 	mov	r3, #0
     294:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0|TIM1|TIM2|TIM3;
     298:	e3a0300f 	mov	r3, #15
     29c:	e54b3038 	strb	r3, [r11, #-56]	; 0xffffffc8
	hps_tim.timeout = 10000;
     2a0:	e3023710 	movw	r3, #10000	; 0x2710
     2a4:	e50b3034 	str	r3, [r11, #-52]	; 0xffffffcc
	hps_tim.LD_en = 1;
     2a8:	e3a03001 	mov	r3, #1
     2ac:	e50b3030 	str	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.INT_en = 1;
     2b0:	e3a03001 	mov	r3, #1
     2b4:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.enable = 1;
     2b8:	e3a03001 	mov	r3, #1
     2bc:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	HPS_TIM_config_ASM(&hps_tim);
     2c0:	e24b3038 	sub	r3, r11, #56	; 0x38
     2c4:	e1a00003 	mov	r0, r3
     2c8:	eb0001dc 	bl	a40 <HPS_TIM_config_ASM>
	int start = 0;
     2cc:	e3a03000 	mov	r3, #0
     2d0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int button_status = 0;
     2d4:	e3a03000 	mov	r3, #0
     2d8:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
     2dc:	ea000000 	b	2e4 <main+0x88>
			HEX_write_ASM(HEX2, sec_display);
			HEX_write_ASM(HEX3, sec/10 );
			HEX_write_ASM(HEX4, min_display);
			HEX_write_ASM(HEX5, min/10 );
	}
}
     2e0:	e1a00000 	nop			; (mov r0, r0)
	hps_tim.enable = 1;
	HPS_TIM_config_ASM(&hps_tim);
	int start = 0;
	int button_status = 0;
	while(1) {	
		button_status = 0xF & read_PB_data_ASM();
     2e4:	eb00019a 	bl	954 <read_PB_data_ASM>
     2e8:	e1a03000 	mov	r3, r0
     2ec:	e203300f 	and	r3, r3, #15
     2f0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
		switch(button_status){
     2f4:	e51b3024 	ldr	r3, [r11, #-36]	; 0xffffffdc
     2f8:	e3530002 	cmp	r3, #2
     2fc:	0a000006 	beq	31c <main+0xc0>
     300:	e3530004 	cmp	r3, #4
     304:	0a000007 	beq	328 <main+0xcc>
     308:	e3530001 	cmp	r3, #1
     30c:	1a000017 	bne	370 <main+0x114>
		case 1:
			start = 1;
     310:	e3a03001 	mov	r3, #1
     314:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
			break;
     318:	ea000014 	b	370 <main+0x114>
		case 2:
			start = 0;
     31c:	e3a03000 	mov	r3, #0
     320:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		break;
     324:	ea000011 	b	370 <main+0x114>
		case 4:
			ms = 0;
     328:	e3a03000 	mov	r3, #0
     32c:	e50b3008 	str	r3, [r11, #-8]
			ms_display = 0;
     330:	e3a03000 	mov	r3, #0
     334:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			sec = 0;
     338:	e3a03000 	mov	r3, #0
     33c:	e50b300c 	str	r3, [r11, #-12]
			sec_display = 0;
     340:	e3a03000 	mov	r3, #0
     344:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			min= 0;
     348:	e3a03000 	mov	r3, #0
     34c:	e50b3010 	str	r3, [r11, #-16]
			min_display = 0;
     350:	e3a03000 	mov	r3, #0
     354:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			HEX_write_ASM(HEX0|HEX1|HEX2|HEX3|HEX4|HEX5, 0);
     358:	e3a0003f 	mov	r0, #63	; 0x3f
     35c:	e3a01000 	mov	r1, #0
     360:	eb000113 	bl	7b4 <HEX_write_ASM>
			start = 0;
     364:	e3a03000 	mov	r3, #0
     368:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
		break;
     36c:	e1a00000 	nop			; (mov r0, r0)
		}
		if (HPS_TIM_read_INT_ASM(TIM0) && start) {
     370:	e3a00001 	mov	r0, #1
     374:	eb0001f7 	bl	b58 <HPS_TIM_read_INT_ASM>
     378:	e1a03000 	mov	r3, r0
     37c:	e3530000 	cmp	r3, #0
     380:	0affffd6 	beq	2e0 <main+0x84>
     384:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     388:	e3530000 	cmp	r3, #0
     38c:	0affffd3 	beq	2e0 <main+0x84>
			HPS_TIM_clear_INT_ASM(TIM0);
     390:	e3a00001 	mov	r0, #1
     394:	eb0001de 	bl	b14 <HPS_TIM_clear_INT_ASM>
			ms+= 10;				
     398:	e51b3008 	ldr	r3, [r11, #-8]
     39c:	e283300a 	add	r3, r3, #10
     3a0:	e50b3008 	str	r3, [r11, #-8]
			if (ms >= 1000) {
     3a4:	e51b2008 	ldr	r2, [r11, #-8]
     3a8:	e30033e7 	movw	r3, #999	; 0x3e7
     3ac:	e1520003 	cmp	r2, r3
     3b0:	da000034 	ble	488 <main+0x22c>
				ms%= 1000;
     3b4:	e51b3008 	ldr	r3, [r11, #-8]
     3b8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
     3bc:	e3412062 	movt	r2, #4194	; 0x1062
     3c0:	e0c21392 	smull	r1, r2, r2, r3
     3c4:	e1a01342 	asr	r1, r2, #6
     3c8:	e1a02fc3 	asr	r2, r3, #31
     3cc:	e0622001 	rsb	r2, r2, r1
     3d0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
     3d4:	e0020291 	mul	r2, r1, r2
     3d8:	e0623003 	rsb	r3, r2, r3
     3dc:	e50b3008 	str	r3, [r11, #-8]
				sec++;				
     3e0:	e51b300c 	ldr	r3, [r11, #-12]
     3e4:	e2833001 	add	r3, r3, #1
     3e8:	e50b300c 	str	r3, [r11, #-12]
				if (sec>= 60) {
     3ec:	e51b300c 	ldr	r3, [r11, #-12]
     3f0:	e353003b 	cmp	r3, #59	; 0x3b
     3f4:	da000023 	ble	488 <main+0x22c>
					sec%= 60;
     3f8:	e51b200c 	ldr	r2, [r11, #-12]
     3fc:	e3083889 	movw	r3, #34953	; 0x8889
     400:	e3483888 	movt	r3, #34952	; 0x8888
     404:	e0c31293 	smull	r1, r3, r3, r2
     408:	e0833002 	add	r3, r3, r2
     40c:	e1a012c3 	asr	r1, r3, #5
     410:	e1a03fc2 	asr	r3, r2, #31
     414:	e0631001 	rsb	r1, r3, r1
     418:	e1a03001 	mov	r3, r1
     41c:	e1a03203 	lsl	r3, r3, #4
     420:	e0613003 	rsb	r3, r1, r3
     424:	e1a03103 	lsl	r3, r3, #2
     428:	e0633002 	rsb	r3, r3, r2
     42c:	e50b300c 	str	r3, [r11, #-12]
					min++;
     430:	e51b3010 	ldr	r3, [r11, #-16]
     434:	e2833001 	add	r3, r3, #1
     438:	e50b3010 	str	r3, [r11, #-16]
					if (min%= 60) min = 0;
     43c:	e51b2010 	ldr	r2, [r11, #-16]
     440:	e3083889 	movw	r3, #34953	; 0x8889
     444:	e3483888 	movt	r3, #34952	; 0x8888
     448:	e0c31293 	smull	r1, r3, r3, r2
     44c:	e0833002 	add	r3, r3, r2
     450:	e1a012c3 	asr	r1, r3, #5
     454:	e1a03fc2 	asr	r3, r2, #31
     458:	e0631001 	rsb	r1, r3, r1
     45c:	e1a03001 	mov	r3, r1
     460:	e1a03203 	lsl	r3, r3, #4
     464:	e0613003 	rsb	r3, r1, r3
     468:	e1a03103 	lsl	r3, r3, #2
     46c:	e0633002 	rsb	r3, r3, r2
     470:	e50b3010 	str	r3, [r11, #-16]
     474:	e51b3010 	ldr	r3, [r11, #-16]
     478:	e3530000 	cmp	r3, #0
     47c:	0a000001 	beq	488 <main+0x22c>
     480:	e3a03000 	mov	r3, #0
     484:	e50b3010 	str	r3, [r11, #-16]
				}
			}
			ms_display = ((ms% 100) / 10);
     488:	e51b2008 	ldr	r2, [r11, #-8]
     48c:	e308351f 	movw	r3, #34079	; 0x851f
     490:	e34531eb 	movt	r3, #20971	; 0x51eb
     494:	e0c31293 	smull	r1, r3, r3, r2
     498:	e1a012c3 	asr	r1, r3, #5
     49c:	e1a03fc2 	asr	r3, r2, #31
     4a0:	e0633001 	rsb	r3, r3, r1
     4a4:	e3a01064 	mov	r1, #100	; 0x64
     4a8:	e0030391 	mul	r3, r1, r3
     4ac:	e0633002 	rsb	r3, r3, r2
     4b0:	e3062667 	movw	r2, #26215	; 0x6667
     4b4:	e3462666 	movt	r2, #26214	; 0x6666
     4b8:	e0c21392 	smull	r1, r2, r2, r3
     4bc:	e1a02142 	asr	r2, r2, #2
     4c0:	e1a03fc3 	asr	r3, r3, #31
     4c4:	e0633002 	rsb	r3, r3, r2
     4c8:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
			sec_display = sec% 10 ;
     4cc:	e51b200c 	ldr	r2, [r11, #-12]
     4d0:	e3063667 	movw	r3, #26215	; 0x6667
     4d4:	e3463666 	movt	r3, #26214	; 0x6666
     4d8:	e0c31293 	smull	r1, r3, r3, r2
     4dc:	e1a01143 	asr	r1, r3, #2
     4e0:	e1a03fc2 	asr	r3, r2, #31
     4e4:	e0631001 	rsb	r1, r3, r1
     4e8:	e1a03001 	mov	r3, r1
     4ec:	e1a03103 	lsl	r3, r3, #2
     4f0:	e0833001 	add	r3, r3, r1
     4f4:	e1a03083 	lsl	r3, r3, #1
     4f8:	e0633002 	rsb	r3, r3, r2
     4fc:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
			min_display = min% 10;
     500:	e51b2010 	ldr	r2, [r11, #-16]
     504:	e3063667 	movw	r3, #26215	; 0x6667
     508:	e3463666 	movt	r3, #26214	; 0x6666
     50c:	e0c31293 	smull	r1, r3, r3, r2
     510:	e1a01143 	asr	r1, r3, #2
     514:	e1a03fc2 	asr	r3, r2, #31
     518:	e0631001 	rsb	r1, r3, r1
     51c:	e1a03001 	mov	r3, r1
     520:	e1a03103 	lsl	r3, r3, #2
     524:	e0833001 	add	r3, r3, r1
     528:	e1a03083 	lsl	r3, r3, #1
     52c:	e0633002 	rsb	r3, r3, r2
     530:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
			//Get corecsponding digit and convert to ASCII
			HEX_write_ASM(HEX0,ms_display);
     534:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     538:	e6ef3073 	uxtb	r3, r3
     53c:	e3a00001 	mov	r0, #1
     540:	e1a01003 	mov	r1, r3
     544:	eb00009a 	bl	7b4 <HEX_write_ASM>
			HEX_write_ASM(HEX1, ms/100);
     548:	e51b2008 	ldr	r2, [r11, #-8]
     54c:	e308351f 	movw	r3, #34079	; 0x851f
     550:	e34531eb 	movt	r3, #20971	; 0x51eb
     554:	e0c31293 	smull	r1, r3, r3, r2
     558:	e1a012c3 	asr	r1, r3, #5
     55c:	e1a03fc2 	asr	r3, r2, #31
     560:	e0633001 	rsb	r3, r3, r1
     564:	e6ef3073 	uxtb	r3, r3
     568:	e3a00002 	mov	r0, #2
     56c:	e1a01003 	mov	r1, r3
     570:	eb00008f 	bl	7b4 <HEX_write_ASM>
			HEX_write_ASM(HEX2, sec_display);
     574:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     578:	e6ef3073 	uxtb	r3, r3
     57c:	e3a00004 	mov	r0, #4
     580:	e1a01003 	mov	r1, r3
     584:	eb00008a 	bl	7b4 <HEX_write_ASM>
			HEX_write_ASM(HEX3, sec/10 );
     588:	e51b200c 	ldr	r2, [r11, #-12]
     58c:	e3063667 	movw	r3, #26215	; 0x6667
     590:	e3463666 	movt	r3, #26214	; 0x6666
     594:	e0c31293 	smull	r1, r3, r3, r2
     598:	e1a01143 	asr	r1, r3, #2
     59c:	e1a03fc2 	asr	r3, r2, #31
     5a0:	e0633001 	rsb	r3, r3, r1
     5a4:	e6ef3073 	uxtb	r3, r3
     5a8:	e3a00008 	mov	r0, #8
     5ac:	e1a01003 	mov	r1, r3
     5b0:	eb00007f 	bl	7b4 <HEX_write_ASM>
			HEX_write_ASM(HEX4, min_display);
     5b4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     5b8:	e6ef3073 	uxtb	r3, r3
     5bc:	e3a00010 	mov	r0, #16
     5c0:	e1a01003 	mov	r1, r3
     5c4:	eb00007a 	bl	7b4 <HEX_write_ASM>
			HEX_write_ASM(HEX5, min/10 );
     5c8:	e51b2010 	ldr	r2, [r11, #-16]
     5cc:	e3063667 	movw	r3, #26215	; 0x6667
     5d0:	e3463666 	movt	r3, #26214	; 0x6666
     5d4:	e0c31293 	smull	r1, r3, r3, r2
     5d8:	e1a01143 	asr	r1, r3, #2
     5dc:	e1a03fc2 	asr	r3, r2, #31
     5e0:	e0633001 	rsb	r3, r3, r1
     5e4:	e6ef3073 	uxtb	r3, r3
     5e8:	e3a00020 	mov	r0, #32
     5ec:	e1a01003 	mov	r1, r3
     5f0:	eb00006f 	bl	7b4 <HEX_write_ASM>
	}
}
     5f4:	eaffff39 	b	2e0 <main+0x84>

000005f8 <read_LEDs_ASM>:
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM: 
	LDR R1, =LED_BASE
     5f8:	e59f1010 	ldr	r1, [pc, #16]	; 610 <write_LEDs_ASM+0xc>
	LDR R0, [R1]
     5fc:	e5910000 	ldr	r0, [r1]
	BX LR
     600:	e12fff1e 	bx	lr

00000604 <write_LEDs_ASM>:

write_LEDs_ASM:
	LDR R1, =LED_BASE
     604:	e59f1004 	ldr	r1, [pc, #4]	; 610 <write_LEDs_ASM+0xc>
	STR R0, [R1]
     608:	e5810000 	str	r0, [r1]
	BX LR
     60c:	e12fff1e 	bx	lr
	.equ LED_BASE, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM: 
	LDR R1, =LED_BASE
     610:	ff200000 	.word	0xff200000

00000614 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
     614:	e59f1004 	ldr	r1, [pc, #4]	; 620 <read_slider_switches_ASM+0xc>
	LDR R0, [R1]
     618:	e5910000 	ldr	r0, [r1]
	BX LR
     61c:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, =SW_BASE
     620:	ff200040 	.word	0xff200040

00000624 <HEX_clear_ASM>:
	.global HEX_clear_ASM
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:
			PUSH {R4-R6}
     624:	e92d0070 	push	{r4, r5, r6}
			LDR R5, =LED_SEG1	//init address
     628:	e59f531c 	ldr	r5, [pc, #796]	; 94c <HEX5_W+0x24>
			LDR R6, =LED_SEG2
     62c:	e59f631c 	ldr	r6, [pc, #796]	; 950 <HEX5_W+0x28>
			LDR R1, [R5]
     630:	e5951000 	ldr	r1, [r5]
			LDR R2, [R6]
     634:	e5962000 	ldr	r2, [r6]

			SUBS R4, R0, #0x20
     638:	e2504020 	subs	r4, r0, #32
			BGE HEX5_C
     63c:	aa000025 	bge	6d8 <HEX5_C>

00000640 <CONT5_C>:
	
CONT5_C:		SUBS R4, R0, #0b10000
     640:	e2504010 	subs	r4, r0, #16
			BGE HEX4_C
     644:	aa00001e 	bge	6c4 <HEX4_C>

00000648 <CONT4_C>:

CONT4_C:		SUBS R4, R0, #0b1000
     648:	e2504008 	subs	r4, r0, #8
			BGE HEX3_C
     64c:	aa000017 	bge	6b0 <HEX3_C>

00000650 <CONT3_C>:

CONT3_C:		SUBS R4, R0, #0b100
     650:	e2504004 	subs	r4, r0, #4
			BGE HEX2_C
     654:	aa000010 	bge	69c <HEX2_C>

00000658 <CONT2_C>:
		
CONT2_C:		SUBS R4, R0, #0b10
     658:	e2504002 	subs	r4, r0, #2
			BGE HEX1_C
     65c:	aa000009 	bge	688 <HEX1_C>

00000660 <CONT1_C>:

CONT1_C:		SUBS R4, R0, #0b1
     660:	e2504001 	subs	r4, r0, #1
			BGE HEX0_C
     664:	aa000001 	bge	670 <HEX0_C>
			POP {R4-R6}
     668:	e8bd0070 	pop	{r4, r5, r6}
			BX LR
     66c:	e12fff1e 	bx	lr

00000670 <HEX0_C>:

HEX0_C:	MOV R3, #0b11111111111111111111111100000000
     670:	e3e030ff 	mvn	r3, #255	; 0xff
		SUB R0, R0, #0b1
     674:	e2400001 	sub	r0, r0, #1
		AND R1, R1, R3
     678:	e0011003 	and	r1, r1, r3
		STR R1, [R5]
     67c:	e5851000 	str	r1, [r5]
		POP {R4-R6}
     680:	e8bd0070 	pop	{r4, r5, r6}
		BX LR
     684:	e12fff1e 	bx	lr

00000688 <HEX1_C>:

HEX1_C:	MOV R3, #0b11111111111111110000000011111111
     688:	e3e03cff 	mvn	r3, #65280	; 0xff00
		SUB R0, R0, #0b10
     68c:	e2400002 	sub	r0, r0, #2
		AND R1, R1, R3
     690:	e0011003 	and	r1, r1, r3
		STR R1, [R5]
     694:	e5851000 	str	r1, [r5]
		B CONT1_C
     698:	eafffff0 	b	660 <CONT1_C>

0000069c <HEX2_C>:

HEX2_C:	MOV R3, #0b11111111000000001111111111111111
     69c:	e3e038ff 	mvn	r3, #16711680	; 0xff0000
		SUB R0, R0, #0b100
     6a0:	e2400004 	sub	r0, r0, #4
		AND R1, R1, R3
     6a4:	e0011003 	and	r1, r1, r3
		STR R1, [R5]
     6a8:	e5851000 	str	r1, [r5]
		B CONT2_C
     6ac:	eaffffe9 	b	658 <CONT2_C>

000006b0 <HEX3_C>:

HEX3_C:	MOV R3, #0b00000000111111111111111111111111
     6b0:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
		SUB R0, R0, #0b1000
     6b4:	e2400008 	sub	r0, r0, #8
		AND R1, R1, R3
     6b8:	e0011003 	and	r1, r1, r3
		STR R1, [R5]
     6bc:	e5851000 	str	r1, [r5]
		B CONT3_C
     6c0:	eaffffe2 	b	650 <CONT3_C>

000006c4 <HEX4_C>:

HEX4_C:	MOV R3, #0b11111111111111111111111100000000
     6c4:	e3e030ff 	mvn	r3, #255	; 0xff
		SUB R0, R0, #0b10000
     6c8:	e2400010 	sub	r0, r0, #16
		AND R2, R2, R3
     6cc:	e0022003 	and	r2, r2, r3
		STR R2, [R6]
     6d0:	e5862000 	str	r2, [r6]
		B CONT4_C
     6d4:	eaffffdb 	b	648 <CONT4_C>

000006d8 <HEX5_C>:

HEX5_C:	MOV R3, #0b11111111111111110000000011111111 
     6d8:	e3e03cff 	mvn	r3, #65280	; 0xff00
		SUB R0, R0, #0b100000
     6dc:	e2400020 	sub	r0, r0, #32
		AND R2, R2, R3	
     6e0:	e0022003 	and	r2, r2, r3
		STR R2, [R6]
     6e4:	e5862000 	str	r2, [r6]
		B CONT5_C
     6e8:	eaffffd4 	b	640 <CONT5_C>

000006ec <HEX_flood_ASM>:


HEX_flood_ASM:
			PUSH {R4-R6}
     6ec:	e92d0070 	push	{r4, r5, r6}
			LDR R5, =LED_SEG1	//init address
     6f0:	e59f5254 	ldr	r5, [pc, #596]	; 94c <HEX5_W+0x24>
			LDR R6, =LED_SEG2
     6f4:	e59f6254 	ldr	r6, [pc, #596]	; 950 <HEX5_W+0x28>
			LDR R1, [R5]
     6f8:	e5951000 	ldr	r1, [r5]
			LDR R2, [R6]
     6fc:	e5962000 	ldr	r2, [r6]

			SUBS R4, R0, #0x20
     700:	e2504020 	subs	r4, r0, #32
			BGE HEX5_F
     704:	aa000025 	bge	7a0 <HEX5_F>

00000708 <CONT5_F>:
	
CONT5_F:		SUBS R4, R0, #0b10000
     708:	e2504010 	subs	r4, r0, #16
			BGE HEX4_F
     70c:	aa00001e 	bge	78c <HEX4_F>

00000710 <CONT4_F>:

CONT4_F:		SUBS R4, R0, #0b1000
     710:	e2504008 	subs	r4, r0, #8
			BGE HEX3_F
     714:	aa000017 	bge	778 <HEX3_F>

00000718 <CONT3_F>:

CONT3_F:		SUBS R4, R0, #0b100
     718:	e2504004 	subs	r4, r0, #4
			BGE HEX2_F
     71c:	aa000010 	bge	764 <HEX2_F>

00000720 <CONT2_F>:
		
CONT2_F:		SUBS R4, R0, #0b10
     720:	e2504002 	subs	r4, r0, #2
			BGE HEX1_F
     724:	aa000009 	bge	750 <HEX1_F>

00000728 <CONT1_F>:

CONT1_F:		SUBS R4, R0, #0b1
     728:	e2504001 	subs	r4, r0, #1
			BGE HEX0_F
     72c:	aa000001 	bge	738 <HEX0_F>
			POP {R4-R6}
     730:	e8bd0070 	pop	{r4, r5, r6}
			BX LR
     734:	e12fff1e 	bx	lr

00000738 <HEX0_F>:

HEX0_F:	MOV R3, #0b00000000000000000000000011111111
     738:	e3a030ff 	mov	r3, #255	; 0xff
		SUB R0, R0, #0b1
     73c:	e2400001 	sub	r0, r0, #1
		ORR R1, R1, R3
     740:	e1811003 	orr	r1, r1, r3
		STR R1, [R5]
     744:	e5851000 	str	r1, [r5]
		POP {R4-R6}
     748:	e8bd0070 	pop	{r4, r5, r6}
		BX LR
     74c:	e12fff1e 	bx	lr

00000750 <HEX1_F>:

HEX1_F:	MOV R3, #0b00000000000000001111111100000000
     750:	e3a03cff 	mov	r3, #65280	; 0xff00
		SUB R0, R0, #0b10
     754:	e2400002 	sub	r0, r0, #2
		ORR R1, R1, R3
     758:	e1811003 	orr	r1, r1, r3
		STR R1, [R5]
     75c:	e5851000 	str	r1, [r5]
		B CONT1_F
     760:	eafffff0 	b	728 <CONT1_F>

00000764 <HEX2_F>:

HEX2_F:	MOV R3, #0b00000000111111110000000000000000
     764:	e3a038ff 	mov	r3, #16711680	; 0xff0000
		SUB R0, R0, #0b100
     768:	e2400004 	sub	r0, r0, #4
		ORR R1, R1, R3
     76c:	e1811003 	orr	r1, r1, r3
		STR R1, [R5]
     770:	e5851000 	str	r1, [r5]
		B CONT2_F
     774:	eaffffe9 	b	720 <CONT2_F>

00000778 <HEX3_F>:

HEX3_F:	MOV R3, #0b11111111000000000000000000000000
     778:	e3a034ff 	mov	r3, #-16777216	; 0xff000000
		SUB R0, R0, #0b1000
     77c:	e2400008 	sub	r0, r0, #8
		ORR R1, R1, R3
     780:	e1811003 	orr	r1, r1, r3
		STR R1, [R5]
     784:	e5851000 	str	r1, [r5]
		B CONT3_F
     788:	eaffffe2 	b	718 <CONT3_F>

0000078c <HEX4_F>:

HEX4_F:	MOV R3, #0b00000000000000000000000011111111
     78c:	e3a030ff 	mov	r3, #255	; 0xff
		SUB R0, R0, #0b10000
     790:	e2400010 	sub	r0, r0, #16
		ORR R2, R2, R3
     794:	e1822003 	orr	r2, r2, r3
		STR R2, [R6]
     798:	e5862000 	str	r2, [r6]
		B CONT4_F
     79c:	eaffffdb 	b	710 <CONT4_F>

000007a0 <HEX5_F>:

HEX5_F:	MOV R3, #0b00000000000000001111111100000000 
     7a0:	e3a03cff 	mov	r3, #65280	; 0xff00
		SUB R0, R0, #0b100000
     7a4:	e2400020 	sub	r0, r0, #32
		ORR R2, R2, R3	
     7a8:	e1822003 	orr	r2, r2, r3
		STR R2, [R6]
     7ac:	e5862000 	str	r2, [r6]
		B CONT5_F
     7b0:	eaffffd4 	b	708 <CONT5_F>

000007b4 <HEX_write_ASM>:
				
HEX_write_ASM:
			//R0, HEX, R1 val
			PUSH {R4-R7}
     7b4:	e92d00f0 	push	{r4, r5, r6, r7}
			LDR R5, =LED_SEG1	//init address
     7b8:	e59f518c 	ldr	r5, [pc, #396]	; 94c <HEX5_W+0x24>
			LDR R6, =LED_SEG2
     7bc:	e59f618c 	ldr	r6, [pc, #396]	; 950 <HEX5_W+0x28>
			LDR R2, [R5]
     7c0:	e5952000 	ldr	r2, [r5]
			LDR R3, [R6]
     7c4:	e5963000 	ldr	r3, [r6]

			MOV R7, #0b00111110 //DEFAULT U: indicates error
     7c8:	e3a0703e 	mov	r7, #62	; 0x3e
			CMP R1, #0
     7cc:	e3510000 	cmp	r1, #0
			MOVEQ R7, #0b00111111
     7d0:	03a0703f 	moveq	r7, #63	; 0x3f
			
			CMP R1, #1
     7d4:	e3510001 	cmp	r1, #1
			MOVEQ R7, #0b00000110
     7d8:	03a07006 	moveq	r7, #6
//4:01100110/5:01101001/6:01111101/7:00000111
//8:01111111/9:01100111/a:01110111/B:01111100
//C:00111001/D:01011110/E:01111001/F:01110001	
			
			
			CMP R1, #2
     7dc:	e3510002 	cmp	r1, #2
			MOVEQ R7, #0b01011011
     7e0:	03a0705b 	moveq	r7, #91	; 0x5b
			
			CMP R1, #3
     7e4:	e3510003 	cmp	r1, #3
			MOVEQ R7, #0b01001111
     7e8:	03a0704f 	moveq	r7, #79	; 0x4f

			CMP R1, #4
     7ec:	e3510004 	cmp	r1, #4
			MOVEQ R7, #0b01100110
     7f0:	03a07066 	moveq	r7, #102	; 0x66

			CMP R1, #5
     7f4:	e3510005 	cmp	r1, #5
			MOVEQ R7, #0b01101101
     7f8:	03a0706d 	moveq	r7, #109	; 0x6d

			CMP R1, #6
     7fc:	e3510006 	cmp	r1, #6
			MOVEQ R7, #0b01111101
     800:	03a0707d 	moveq	r7, #125	; 0x7d

			CMP R1, #7
     804:	e3510007 	cmp	r1, #7
			MOVEQ R7, #0b00000111
     808:	03a07007 	moveq	r7, #7

			CMP R1, #8
     80c:	e3510008 	cmp	r1, #8
			MOVEQ R7, #0b01111111
     810:	03a0707f 	moveq	r7, #127	; 0x7f

			CMP R1, #9
     814:	e3510009 	cmp	r1, #9
			MOVEQ R7, #0b01101111
     818:	03a0706f 	moveq	r7, #111	; 0x6f

			CMP R1, #10
     81c:	e351000a 	cmp	r1, #10
			MOVEQ R7, #0b01110111
     820:	03a07077 	moveq	r7, #119	; 0x77

			CMP R1, #11
     824:	e351000b 	cmp	r1, #11
			MOVEQ R7, #0b01111100
     828:	03a0707c 	moveq	r7, #124	; 0x7c

			CMP R1, #12
     82c:	e351000c 	cmp	r1, #12
			MOVEQ R7, #0b00111001
     830:	03a07039 	moveq	r7, #57	; 0x39

			CMP R1, #13
     834:	e351000d 	cmp	r1, #13
			MOVEQ R7, #0b01011110
     838:	03a0705e 	moveq	r7, #94	; 0x5e

			CMP R1, #14
     83c:	e351000e 	cmp	r1, #14
			MOVEQ R7, #0b01111001
     840:	03a07079 	moveq	r7, #121	; 0x79

			CMP R1, #15
     844:	e351000f 	cmp	r1, #15
			MOVEQ R7, #0b01110001
     848:	03a07071 	moveq	r7, #113	; 0x71

				MOV R8, R7
     84c:	e1a08007 	mov	r8, r7
			
						
				SUBS R4, R0, #0x20
     850:	e2504020 	subs	r4, r0, #32
				MOV R7, R8
     854:	e1a07008 	mov	r7, r8
				BGE HEX5_W
     858:	aa000032 	bge	928 <HEX5_W>

0000085c <CONT5_W>:
	
CONT5_W:		SUBS R4, R0, #0b10000
     85c:	e2504010 	subs	r4, r0, #16
				MOV R7, R8
     860:	e1a07008 	mov	r7, r8
				BGE HEX4_W
     864:	aa000029 	bge	910 <HEX4_W>

00000868 <CONT4_W>:

CONT4_W:		SUBS R4, R0, #0b1000
     868:	e2504008 	subs	r4, r0, #8
				MOV R7, R8
     86c:	e1a07008 	mov	r7, r8
				BGE HEX3_W
     870:	aa00001f 	bge	8f4 <HEX3_W>

00000874 <CONT3_W>:

CONT3_W:		SUBS R4, R0, #0b100
     874:	e2504004 	subs	r4, r0, #4
				MOV R7, R8
     878:	e1a07008 	mov	r7, r8
				BGE HEX2_W
     87c:	aa000015 	bge	8d8 <HEX2_W>

00000880 <CONT2_W>:
		
CONT2_W:		SUBS R4, R0, #0b10
     880:	e2504002 	subs	r4, r0, #2
				MOV R7, R8
     884:	e1a07008 	mov	r7, r8
				BGE HEX1_W
     888:	aa00000b 	bge	8bc <HEX1_W>

0000088c <CONT1_W>:

CONT1_W:		SUBS R4, R0, #0b1
     88c:	e2504001 	subs	r4, r0, #1
				MOV R7, R8
     890:	e1a07008 	mov	r7, r8
				BGE HEX0_W
     894:	aa000001 	bge	8a0 <HEX0_W>
				POP {R4-R7}
     898:	e8bd00f0 	pop	{r4, r5, r6, r7}
				BX LR
     89c:	e12fff1e 	bx	lr

000008a0 <HEX0_W>:


HEX0_W:	
		MOV R4, #0b11111111111111111111111100000000
     8a0:	e3e040ff 	mvn	r4, #255	; 0xff
		SUB R0, R0, #0b1
     8a4:	e2400001 	sub	r0, r0, #1
		AND R2, R2, R4
     8a8:	e0022004 	and	r2, r2, r4
		ORR R2, R2, R7
     8ac:	e1822007 	orr	r2, r2, r7
		STR R2, [R5]
     8b0:	e5852000 	str	r2, [r5]
		POP {R4-R7}
     8b4:	e8bd00f0 	pop	{r4, r5, r6, r7}
		BX LR
     8b8:	e12fff1e 	bx	lr

000008bc <HEX1_W>:

HEX1_W:	MOV R4, #0b11111111111111110000000011111111
     8bc:	e3e04cff 	mvn	r4, #65280	; 0xff00
		SUB R0, R0, #0b10
     8c0:	e2400002 	sub	r0, r0, #2
		AND R2, R2, R4
     8c4:	e0022004 	and	r2, r2, r4
		LSL R7, R7, #8
     8c8:	e1a07407 	lsl	r7, r7, #8
		ORR R2, R2, R7
     8cc:	e1822007 	orr	r2, r2, r7
		STR R2, [R5]
     8d0:	e5852000 	str	r2, [r5]
		B CONT1_W
     8d4:	eaffffec 	b	88c <CONT1_W>

000008d8 <HEX2_W>:

HEX2_W:	MOV R4, #0b11111111000000001111111111111111
     8d8:	e3e048ff 	mvn	r4, #16711680	; 0xff0000
		SUB R0, R0, #0b100
     8dc:	e2400004 	sub	r0, r0, #4
		AND R2, R2, R4
     8e0:	e0022004 	and	r2, r2, r4
		LSL R7, R7, #16
     8e4:	e1a07807 	lsl	r7, r7, #16
		ORR R2, R2, R7
     8e8:	e1822007 	orr	r2, r2, r7
		STR R2, [R5]
     8ec:	e5852000 	str	r2, [r5]
		B CONT2_W
     8f0:	eaffffe2 	b	880 <CONT2_W>

000008f4 <HEX3_W>:

HEX3_W:	MOV R4, #0b00000000111111111111111111111111
     8f4:	e3e044ff 	mvn	r4, #-16777216	; 0xff000000
		SUB R0, R0, #0b1000
     8f8:	e2400008 	sub	r0, r0, #8
		AND R2, R2, R4
     8fc:	e0022004 	and	r2, r2, r4
		LSL R7, R7, #24
     900:	e1a07c07 	lsl	r7, r7, #24
		ORR R2, R2, R7 
     904:	e1822007 	orr	r2, r2, r7
		STR R2, [R5]
     908:	e5852000 	str	r2, [r5]
		B CONT3_W
     90c:	eaffffd8 	b	874 <CONT3_W>

00000910 <HEX4_W>:

HEX4_W:	MOV R4, #0b11111111111111111111111100000000
     910:	e3e040ff 	mvn	r4, #255	; 0xff
		SUB R0, R0, #0b10000
     914:	e2400010 	sub	r0, r0, #16
		AND R3, R3, R4
     918:	e0033004 	and	r3, r3, r4
		ORR R3, R3, R7
     91c:	e1833007 	orr	r3, r3, r7
		STR R3, [R6]
     920:	e5863000 	str	r3, [r6]
		B CONT4_W
     924:	eaffffcf 	b	868 <CONT4_W>

00000928 <HEX5_W>:

HEX5_W:	MOV R4, #0b11111111111111110000000011111111 
     928:	e3e04cff 	mvn	r4, #65280	; 0xff00
		SUB R0, R0, #0b100000
     92c:	e2400020 	sub	r0, r0, #32
		AND R3, R3, R4
     930:	e0033004 	and	r3, r3, r4
		LSL R7, R7, #8
     934:	e1a07407 	lsl	r7, r7, #8
		ORR R3, R3, R7
     938:	e1833007 	orr	r3, r3, r7
		
		STR R3, [R6]
     93c:	e5863000 	str	r3, [r6]
		B CONT5_W	
     940:	eaffffc5 	b	85c <CONT5_W>

		POP {R4-R7}
     944:	e8bd00f0 	pop	{r4, r5, r6, r7}
		BX LR
     948:	e12fff1e 	bx	lr
	.global HEX_flood_ASM
	.global HEX_write_ASM

HEX_clear_ASM:
			PUSH {R4-R6}
			LDR R5, =LED_SEG1	//init address
     94c:	ff200020 	.word	0xff200020
			LDR R6, =LED_SEG2
     950:	ff200030 	.word	0xff200030

00000954 <read_PB_data_ASM>:
		.global PB_clear_edgecap_ASM
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:		// return a binary string, where the final 4 bits hold the status of the buttons (pressed or not)
	PUSH {LR}
     954:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_data	// load the memory address from which we'll get the value
     958:	e59f10d4 	ldr	r1, [pc, #212]	; a34 <disable_PB_INT_ASM+0x20>
	LDR R0, [R1]		// get the value and put it into R0
     95c:	e5910000 	ldr	r0, [r1]
	POP {LR}
     960:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 				// leave
     964:	e12fff1e 	bx	lr

00000968 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:	// check if the indicated buttons are pressed. If yes, return 1. Otherwise, return 0.
	PUSH {R1}
     968:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     96c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_data	// load the memory address where the value is stored
     970:	e59f10bc 	ldr	r1, [pc, #188]	; a34 <disable_PB_INT_ASM+0x20>
	LDR R1, [R1]		// get the value and put it into R1
     974:	e5911000 	ldr	r1, [r1]
	CMP R0, R1			// check if the input string matches the string in memory
     978:	e1500001 	cmp	r0, r1
	BEQ	O
     97c:	0a000001 	beq	988 <O>
	MOV R0, #0			// if no, return false
     980:	e3a00000 	mov	r0, #0
	B E
     984:	ea000000 	b	98c <E>

00000988 <O>:
O:	MOV R0, #1			// if yes, return true
     988:	e3a00001 	mov	r0, #1

0000098c <E>:
E:	POP {LR}
     98c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     990:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     994:	e12fff1e 	bx	lr

00000998 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:	// return a binary string, where the final 4 bits hold the edgecap bits
	PUSH {LR}
     998:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R0, =PUSH_edge	// load the memory address from which we'll get the value
     99c:	e59f0094 	ldr	r0, [pc, #148]	; a38 <disable_PB_INT_ASM+0x24>
	LDR R0, [R0]		// get the value and put it into R0 for return
     9a0:	e5900000 	ldr	r0, [r0]
	POP {LR}
     9a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 				// leave
     9a8:	e12fff1e 	bx	lr

000009ac <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:	// check if the indicated buttons are pressed. If yes, return 1. Otherwise, return 0.
	PUSH {R1}
     9ac:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     9b0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_edge	// load the memory address where the value is stored
     9b4:	e59f107c 	ldr	r1, [pc, #124]	; a38 <disable_PB_INT_ASM+0x24>
	LDR R1, [R1]		// get the value and put it into R1
     9b8:	e5911000 	ldr	r1, [r1]
	CMP R0, R1			// check if the input string matches the string in memory
     9bc:	e1500001 	cmp	r0, r1
	BEQ	Z
     9c0:	0a000001 	beq	9cc <Z>
	MOV R0, #0			// if no, return false
     9c4:	e3a00000 	mov	r0, #0
	B D
     9c8:	ea000000 	b	9d0 <D>

000009cc <Z>:
Z:	MOV R0, #1			// if yes, return true
     9cc:	e3a00001 	mov	r0, #1

000009d0 <D>:
D:	POP {LR}
     9d0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     9d4:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     9d8:	e12fff1e 	bx	lr

000009dc <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:	// write the input string into the edge capture memory location
						// no alterations required, since the input value is already the appropriate binary string
	PUSH {R1}
     9dc:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     9e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_edge	// load the target memory address	
     9e4:	e59f104c 	ldr	r1, [pc, #76]	; a38 <disable_PB_INT_ASM+0x24>
	STR R0, [R1]		// store the input value (which is in R0) to the memory address in R1
     9e8:	e5810000 	str	r0, [r1]
	POP {LR}
     9ec:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     9f0:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     9f4:	e12fff1e 	bx	lr

000009f8 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:		// write the input string into the interrupt mask memory location
	PUSH {R1}
     9f8:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     9fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_mask	// load the target memory address
     a00:	e59f1034 	ldr	r1, [pc, #52]	; a3c <disable_PB_INT_ASM+0x28>
	STR R0, [R1]		// store the input value (which is in R0) to the memory address in R1
     a04:	e5810000 	str	r0, [r1]
	POP {LR}
     a08:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     a0c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     a10:	e12fff1e 	bx	lr

00000a14 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:		// write the opposite of the input string into the interrupt mask memory location
	PUSH {R1}
     a14:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	PUSH {LR}
     a18:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	LDR R1, =PUSH_mask	// load the target memory address
     a1c:	e59f1018 	ldr	r1, [pc, #24]	; a3c <disable_PB_INT_ASM+0x28>
	MVN R0, R0			// invert the input string
     a20:	e1e00000 	mvn	r0, r0
	STR R0, [R1]		// store the input value (which is in R0) to the memory address in R1
     a24:	e5810000 	str	r0, [r1]
	POP {LR}
     a28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	POP {R1}
     a2c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR 				// leave
     a30:	e12fff1e 	bx	lr
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:		// return a binary string, where the final 4 bits hold the status of the buttons (pressed or not)
	PUSH {LR}
	LDR R1, =PUSH_data	// load the memory address from which we'll get the value
     a34:	ff200050 	.word	0xff200050
	POP {R1}
	BX LR 				// leave

read_PB_edgecap_ASM:	// return a binary string, where the final 4 bits hold the edgecap bits
	PUSH {LR}
	LDR R0, =PUSH_edge	// load the memory address from which we'll get the value
     a38:	ff20005c 	.word	0xff20005c
	BX LR 				// leave

enable_PB_INT_ASM:		// write the input string into the interrupt mask memory location
	PUSH {R1}
	PUSH {LR}
	LDR R1, =PUSH_mask	// load the target memory address
     a3c:	ff200058 	.word	0xff200058

00000a40 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
     a40:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
     a44:	e3a01000 	mov	r1, #0
	MOV R2, #1
     a48:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
     a4c:	e5907000 	ldr	r7, [r0]
	B LOOP
     a50:	eaffffff 	b	a54 <LOOP>

00000a54 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
     a54:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
     a58:	0a000000 	beq	a60 <CONTINUE>
	BL CONFIG
     a5c:	eb000004 	bl	a74 <CONFIG>

00000a60 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
     a60:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     a64:	e3510004 	cmp	r1, #4
	BLT LOOP
     a68:	bafffff9 	blt	a54 <LOOP>

00000a6c <DONE>:

DONE:
	POP {R4-R7, LR}
     a6c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
     a70:	e12fff1e 	bx	lr

00000a74 <CONFIG>:


CONFIG:
	PUSH {LR}
     a74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
     a78:	e59f3148 	ldr	r3, [pc, #328]	; bc8 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
     a7c:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
     a80:	eb000005 	bl	a9c <DISABLE>
	BL SET_LOAD_VAL
     a84:	eb000008 	bl	aac <SET_LOAD_VAL>
	BL SET_LOAD_BIT
     a88:	eb00000e 	bl	ac8 <SET_LOAD_BIT>
	BL SET_INT_BIT
     a8c:	eb000013 	bl	ae0 <SET_INT_BIT>
	BL SET_EN_BIT
     a90:	eb000019 	bl	afc <SET_EN_BIT>
	
	POP {LR}
     a94:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
     a98:	e12fff1e 	bx	lr

00000a9c <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
     a9c:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
     aa0:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
     aa4:	e5845008 	str	r5, [r4, #8]
	BX LR
     aa8:	e12fff1e 	bx	lr

00000aac <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
     aac:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
     ab0:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
     ab4:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
     ab8:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
     abc:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
     ac0:	e5845000 	str	r5, [r4]
	BX LR
     ac4:	e12fff1e 	bx	lr

00000ac8 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
     ac8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
     acc:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
     ad0:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
     ad4:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
     ad8:	e5845008 	str	r5, [r4, #8]
	BX LR
     adc:	e12fff1e 	bx	lr

00000ae0 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
     ae0:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
     ae4:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
     ae8:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
     aec:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
     af0:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
     af4:	e5845008 	str	r5, [r4, #8]
	BX LR
     af8:	e12fff1e 	bx	lr

00000afc <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
     afc:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
     b00:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
     b04:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
     b08:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
     b0c:	e5845008 	str	r5, [r4, #8]
	BX LR
     b10:	e12fff1e 	bx	lr

00000b14 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
     b14:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
     b18:	e3a01000 	mov	r1, #0
	MOV R2, #1
     b1c:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
     b20:	eaffffff 	b	b24 <CLEAR_INT_LOOP>

00000b24 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
     b24:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
     b28:	0a000000 	beq	b30 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
     b2c:	eb000005 	bl	b48 <CLEAR_INT>

00000b30 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
     b30:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     b34:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
     b38:	bafffff9 	blt	b24 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
     b3c:	eaffffff 	b	b40 <CLEAR_INT_DONE>

00000b40 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
     b40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b44:	e12fff1e 	bx	lr

00000b48 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
     b48:	e59f3078 	ldr	r3, [pc, #120]	; bc8 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     b4c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
     b50:	e593300c 	ldr	r3, [r3, #12]
	BX LR
     b54:	e12fff1e 	bx	lr

00000b58 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
     b58:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
     b5c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
     b60:	e3a01000 	mov	r1, #0
	MOV R2, #1
     b64:	e3a02001 	mov	r2, #1
	MOV R4, #0
     b68:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
     b6c:	eaffffff 	b	b70 <READ_INT_LOOP>

00000b70 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
     b70:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
     b74:	0a000000 	beq	b7c <READ_INT_CONTINUE>
	BL READ_INT
     b78:	eb000008 	bl	ba0 <READ_INT>

00000b7c <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
     b7c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
     b80:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
     b84:	0a000001 	beq	b90 <READ_INT_DONE>
	LSL R4, R4, #1
     b88:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
     b8c:	eafffff7 	b	b70 <READ_INT_LOOP>

00000b90 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
     b90:	e1a00004 	mov	r0, r4
	POP {R4}
     b94:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
     b98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     b9c:	e12fff1e 	bx	lr

00000ba0 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
     ba0:	e59f3020 	ldr	r3, [pc, #32]	; bc8 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
     ba4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
     ba8:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
     bac:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
     bb0:	e0244003 	eor	r4, r4, r3
	BX LR
     bb4:	e12fff1e 	bx	lr

00000bb8 <HPS_TIM_BASE>:
     bb8:	ffc08000 	.word	0xffc08000
     bbc:	ffc09000 	.word	0xffc09000
     bc0:	ffd00000 	.word	0xffd00000
     bc4:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
     bc8:	00000bb8 	.word	0x00000bb8

00000bcc <hps_tim0_int_flag>:
     bcc:	00000000 	.word	0x00000000

00000bd0 <hps_tim1_int_flag>:
     bd0:	00000000 	.word	0x00000000

00000bd4 <hps_tim2_int_flag>:
     bd4:	00000000 	.word	0x00000000

00000bd8 <hps_tim3_int_flag>:
     bd8:	00000000 	.word	0x00000000

00000bdc <pb_int_flag>:
     bdc:	00000000 	.word	0x00000000

00000be0 <A9_PRIV_TIM_ISR>:

pb_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     be0:	e12fff1e 	bx	lr

00000be4 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     be4:	e12fff1e 	bx	lr

00000be8 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {R14}							// push LR to stack
     be8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1						// move 0000....00001 to R0 choose Timer 0
     bec:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM			// clear timer 0 to get it ready
     bf0:	ebffffc7 	bl	b14 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag			// load address set aside for timer flag
     bf4:	e59f00a8 	ldr	r0, [pc, #168]	; ca4 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1							// load a 1 into R1
     bf8:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// store 1 into the flag address => sets flag to 1
     bfc:	e5801000 	str	r1, [r0]

	POP {R14}							// pop LR from stack
     c00:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c04:	e12fff1e 	bx	lr

00000c08 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	PUSH {R14}							// push LR to stack
     c08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x2						// move 0000....00010 to R0 choose Timer 1
     c0c:	e3a00002 	mov	r0, #2
	BL HPS_TIM_clear_INT_ASM			// clear timer 1 to get it ready
     c10:	ebffffbf 	bl	b14 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim1_int_flag			// load address set aside for timer flag
     c14:	e59f008c 	ldr	r0, [pc, #140]	; ca8 <FPGA_PS2_DUAL_ISR+0x8>
	MOV R1, #1							// load a 1 into R1
     c18:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// store 1 into the flag address => sets flag to 1
     c1c:	e5801000 	str	r1, [r0]

	POP {R14}							// pop LR from stack
     c20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c24:	e12fff1e 	bx	lr

00000c28 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	PUSH {R14}							// push LR to stack
     c28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x4						// move 0000....00100 to R0 choose Timer 2
     c2c:	e3a00004 	mov	r0, #4
	BL HPS_TIM_clear_INT_ASM			// clear timer 2 to get it ready
     c30:	ebffffb7 	bl	b14 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim2_int_flag			// load address set aside for timer flag
     c34:	e59f0070 	ldr	r0, [pc, #112]	; cac <FPGA_PS2_DUAL_ISR+0xc>
	MOV R1, #1							// load a 1 into R1
     c38:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// store 1 into the flag address => sets flag to 1
     c3c:	e5801000 	str	r1, [r0]

	POP {R14}							// pop LR from stack
     c40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c44:	e12fff1e 	bx	lr

00000c48 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	PUSH {R14}							// push LR to stack
     c48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x8						// move 0000....01000 to R0 choose Timer 3
     c4c:	e3a00008 	mov	r0, #8
	BL HPS_TIM_clear_INT_ASM			// clear timer 3 to get it ready
     c50:	ebffffaf 	bl	b14 <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim3_int_flag			// load address set aside for timer flag
     c54:	e59f0054 	ldr	r0, [pc, #84]	; cb0 <FPGA_PS2_DUAL_ISR+0x10>
	MOV R1, #1							// load a 1 into R1
     c58:	e3a01001 	mov	r1, #1
	STR R1, [R0]						// store 1 into the flag address => sets flag to 1
     c5c:	e5801000 	str	r1, [r0]

	POP {R14}							// pop LR from stack
     c60:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c64:	e12fff1e 	bx	lr

00000c68 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     c68:	e12fff1e 	bx	lr

00000c6c <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {R14}						// push LR to stack
     c6c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	BL read_PB_edgecap_ASM			// get pushbutton that was pressed
     c70:	ebffff48 	bl	998 <read_PB_edgecap_ASM>

	LDR R1, =pb_int_flag			// load address set aside for pushbutton flag
     c74:	e59f1038 	ldr	r1, [pc, #56]	; cb4 <FPGA_PS2_DUAL_ISR+0x14>
	STR R0, [R1]					// set the flag to the same value as the pushbutton that was pressed
     c78:	e5810000 	str	r0, [r1]

	BL PB_clear_edgecap_ASM			// clear edgecap to reset interrupt. Pushbutton required is still stored in R0
     c7c:	ebffff56 	bl	9dc <PB_clear_edgecap_ASM>

	POP {R14}						// pop LR from stack
     c80:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     c84:	e12fff1e 	bx	lr

00000c88 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     c88:	e12fff1e 	bx	lr

00000c8c <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     c8c:	e12fff1e 	bx	lr

00000c90 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     c90:	e12fff1e 	bx	lr

00000c94 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     c94:	e12fff1e 	bx	lr

00000c98 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     c98:	e12fff1e 	bx	lr

00000c9c <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     c9c:	e12fff1e 	bx	lr

00000ca0 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     ca0:	e12fff1e 	bx	lr
	PUSH {R14}							// push LR to stack
	
	MOV R0, #0x1						// move 0000....00001 to R0 choose Timer 0
	BL HPS_TIM_clear_INT_ASM			// clear timer 0 to get it ready

	LDR R0, =hps_tim0_int_flag			// load address set aside for timer flag
     ca4:	00000bcc 	.word	0x00000bcc
	PUSH {R14}							// push LR to stack
	
	MOV R0, #0x2						// move 0000....00010 to R0 choose Timer 1
	BL HPS_TIM_clear_INT_ASM			// clear timer 1 to get it ready

	LDR R0, =hps_tim1_int_flag			// load address set aside for timer flag
     ca8:	00000bd0 	.word	0x00000bd0
	PUSH {R14}							// push LR to stack
	
	MOV R0, #0x4						// move 0000....00100 to R0 choose Timer 2
	BL HPS_TIM_clear_INT_ASM			// clear timer 2 to get it ready

	LDR R0, =hps_tim2_int_flag			// load address set aside for timer flag
     cac:	00000bd4 	.word	0x00000bd4
	PUSH {R14}							// push LR to stack
	
	MOV R0, #0x8						// move 0000....01000 to R0 choose Timer 3
	BL HPS_TIM_clear_INT_ASM			// clear timer 3 to get it ready

	LDR R0, =hps_tim3_int_flag			// load address set aside for timer flag
     cb0:	00000bd8 	.word	0x00000bd8
FPGA_PB_KEYS_ISR:
	PUSH {R14}						// push LR to stack

	BL read_PB_edgecap_ASM			// get pushbutton that was pressed

	LDR R1, =pb_int_flag			// load address set aside for pushbutton flag
     cb4:	00000bdc 	.word	0x00000bdc

00000cb8 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     cb8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     cbc:	e28db000 	add	r11, sp, #0
     cc0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     cc4:	e3a030d3 	mov	r3, #211	; 0xd3
     cc8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     ccc:	e51b3008 	ldr	r3, [r11, #-8]
     cd0:	e129f003 	msr	CPSR_fc, r3
}
     cd4:	e28bd000 	add	sp, r11, #0
     cd8:	e8bd0800 	ldmfd	sp!, {r11}
     cdc:	e12fff1e 	bx	lr

00000ce0 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     ce0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ce4:	e28db000 	add	r11, sp, #0
     ce8:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     cec:	e3a03053 	mov	r3, #83	; 0x53
     cf0:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     cf4:	e51b3008 	ldr	r3, [r11, #-8]
     cf8:	e129f003 	msr	CPSR_fc, r3
}
     cfc:	e28bd000 	add	sp, r11, #0
     d00:	e8bd0800 	ldmfd	sp!, {r11}
     d04:	e12fff1e 	bx	lr

00000d08 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     d08:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d0c:	e28db000 	add	r11, sp, #0
     d10:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     d14:	e3e03007 	mvn	r3, #7
     d18:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     d1c:	e3a030d2 	mov	r3, #210	; 0xd2
     d20:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     d24:	e51b300c 	ldr	r3, [r11, #-12]
     d28:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     d2c:	e51b3008 	ldr	r3, [r11, #-8]
     d30:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     d34:	e3a030d3 	mov	r3, #211	; 0xd3
     d38:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     d3c:	e51b300c 	ldr	r3, [r11, #-12]
     d40:	e129f003 	msr	CPSR_fc, r3
}
     d44:	e28bd000 	add	sp, r11, #0
     d48:	e8bd0800 	ldmfd	sp!, {r11}
     d4c:	e12fff1e 	bx	lr

00000d50 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     d50:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d54:	e28db000 	add	r11, sp, #0
     d58:	e24dd01c 	sub	sp, sp, #28
     d5c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     d60:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     d64:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d68:	e1a031c3 	asr	r3, r3, #3
     d6c:	e3c33003 	bic	r3, r3, #3
     d70:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     d74:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     d78:	e203301f 	and	r3, r3, #31
     d7c:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     d80:	e3a02001 	mov	r2, #1
     d84:	e51b300c 	ldr	r3, [r11, #-12]
     d88:	e1a03312 	lsl	r3, r2, r3
     d8c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     d90:	e51b3008 	ldr	r3, [r11, #-8]
     d94:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     d98:	e2433c03 	sub	r3, r3, #768	; 0x300
     d9c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     da0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     da4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     da8:	e5921000 	ldr	r1, [r2]
     dac:	e51b2010 	ldr	r2, [r11, #-16]
     db0:	e1812002 	orr	r2, r1, r2
     db4:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     db8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     dbc:	e3c33003 	bic	r3, r3, #3
     dc0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     dc4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     dc8:	e2033003 	and	r3, r3, #3
     dcc:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     dd0:	e51b2008 	ldr	r2, [r11, #-8]
     dd4:	e51b300c 	ldr	r3, [r11, #-12]
     dd8:	e0823003 	add	r3, r2, r3
     ddc:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     de0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     de4:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     de8:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     dec:	e6ef2072 	uxtb	r2, r2
     df0:	e5c32000 	strb	r2, [r3]
}
     df4:	e28bd000 	add	sp, r11, #0
     df8:	e8bd0800 	ldmfd	sp!, {r11}
     dfc:	e12fff1e 	bx	lr

00000e00 <config_GIC>:

void config_GIC(int len, int* IDs) {
     e00:	e92d4800 	push	{r11, lr}
     e04:	e28db004 	add	r11, sp, #4
     e08:	e24dd010 	sub	sp, sp, #16
     e0c:	e50b0010 	str	r0, [r11, #-16]
     e10:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     e14:	e3a03000 	mov	r3, #0
     e18:	e50b3008 	str	r3, [r11, #-8]
     e1c:	ea00000a 	b	e4c <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     e20:	e51b3008 	ldr	r3, [r11, #-8]
     e24:	e1a03103 	lsl	r3, r3, #2
     e28:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     e2c:	e0823003 	add	r3, r2, r3
     e30:	e5933000 	ldr	r3, [r3]
     e34:	e1a00003 	mov	r0, r3
     e38:	e3a01001 	mov	r1, #1
     e3c:	ebffffc3 	bl	d50 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     e40:	e51b3008 	ldr	r3, [r11, #-8]
     e44:	e2833001 	add	r3, r3, #1
     e48:	e50b3008 	str	r3, [r11, #-8]
     e4c:	e51b2008 	ldr	r2, [r11, #-8]
     e50:	e51b3010 	ldr	r3, [r11, #-16]
     e54:	e1520003 	cmp	r2, r3
     e58:	bafffff0 	blt	e20 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     e5c:	e30c3104 	movw	r3, #49412	; 0xc104
     e60:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e64:	e30f2fff 	movw	r2, #65535	; 0xffff
     e68:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     e6c:	e3a03cc1 	mov	r3, #49408	; 0xc100
     e70:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e74:	e3a02001 	mov	r2, #1
     e78:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     e7c:	e3a03a0d 	mov	r3, #53248	; 0xd000
     e80:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     e84:	e3a02001 	mov	r2, #1
     e88:	e5832000 	str	r2, [r3]
}
     e8c:	e24bd004 	sub	sp, r11, #4
     e90:	e8bd8800 	pop	{r11, pc}

00000e94 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     e94:	e24ee004 	sub	lr, lr, #4
     e98:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     e9c:	e28db018 	add	r11, sp, #24
     ea0:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     ea4:	e30c310c 	movw	r3, #49420	; 0xc10c
     ea8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     eac:	e5933000 	ldr	r3, [r3]
     eb0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     eb4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     eb8:	e3530053 	cmp	r3, #83	; 0x53
     ebc:	0a00003d 	beq	fb8 <__cs3_isr_irq+0x124>
     ec0:	e3530053 	cmp	r3, #83	; 0x53
     ec4:	ca000011 	bgt	f10 <__cs3_isr_irq+0x7c>
     ec8:	e353004e 	cmp	r3, #78	; 0x4e
     ecc:	0a000031 	beq	f98 <__cs3_isr_irq+0x104>
     ed0:	e353004e 	cmp	r3, #78	; 0x4e
     ed4:	ca000006 	bgt	ef4 <__cs3_isr_irq+0x60>
     ed8:	e3530048 	cmp	r3, #72	; 0x48
     edc:	0a000029 	beq	f88 <__cs3_isr_irq+0xf4>
     ee0:	e3530049 	cmp	r3, #73	; 0x49
     ee4:	0a000029 	beq	f90 <__cs3_isr_irq+0xfc>
     ee8:	e353001d 	cmp	r3, #29
     eec:	0a000019 	beq	f58 <__cs3_isr_irq+0xc4>
     ef0:	ea000036 	b	fd0 <__cs3_isr_irq+0x13c>
     ef4:	e3530050 	cmp	r3, #80	; 0x50
     ef8:	0a00002a 	beq	fa8 <__cs3_isr_irq+0x114>
     efc:	e3530050 	cmp	r3, #80	; 0x50
     f00:	ba000026 	blt	fa0 <__cs3_isr_irq+0x10c>
     f04:	e3530051 	cmp	r3, #81	; 0x51
     f08:	0a000028 	beq	fb0 <__cs3_isr_irq+0x11c>
     f0c:	ea00002f 	b	fd0 <__cs3_isr_irq+0x13c>
     f10:	e35300c7 	cmp	r3, #199	; 0xc7
     f14:	0a000013 	beq	f68 <__cs3_isr_irq+0xd4>
     f18:	e35300c7 	cmp	r3, #199	; 0xc7
     f1c:	ca000006 	bgt	f3c <__cs3_isr_irq+0xa8>
     f20:	e3530059 	cmp	r3, #89	; 0x59
     f24:	0a000027 	beq	fc8 <__cs3_isr_irq+0x134>
     f28:	e35300c5 	cmp	r3, #197	; 0xc5
     f2c:	0a00000b 	beq	f60 <__cs3_isr_irq+0xcc>
     f30:	e3530054 	cmp	r3, #84	; 0x54
     f34:	0a000021 	beq	fc0 <__cs3_isr_irq+0x12c>
     f38:	ea000024 	b	fd0 <__cs3_isr_irq+0x13c>
     f3c:	e35300c9 	cmp	r3, #201	; 0xc9
     f40:	0a00000c 	beq	f78 <__cs3_isr_irq+0xe4>
     f44:	e35300c9 	cmp	r3, #201	; 0xc9
     f48:	ba000008 	blt	f70 <__cs3_isr_irq+0xdc>
     f4c:	e35300ca 	cmp	r3, #202	; 0xca
     f50:	0a00000a 	beq	f80 <__cs3_isr_irq+0xec>
     f54:	ea00001d 	b	fd0 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     f58:	ebffff20 	bl	be0 <A9_PRIV_TIM_ISR>
     f5c:	ea00001c 	b	fd4 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     f60:	ebffff1f 	bl	be4 <HPS_GPIO1_ISR>
     f64:	ea00001a 	b	fd4 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     f68:	ebffff1e 	bl	be8 <HPS_TIM0_ISR>
     f6c:	ea000018 	b	fd4 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     f70:	ebffff24 	bl	c08 <HPS_TIM1_ISR>
     f74:	ea000016 	b	fd4 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     f78:	ebffff2a 	bl	c28 <HPS_TIM2_ISR>
     f7c:	ea000014 	b	fd4 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     f80:	ebffff30 	bl	c48 <HPS_TIM3_ISR>
     f84:	ea000012 	b	fd4 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     f88:	ebffff36 	bl	c68 <FPGA_INTERVAL_TIM_ISR>
     f8c:	ea000010 	b	fd4 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     f90:	ebffff35 	bl	c6c <FPGA_PB_KEYS_ISR>
     f94:	ea00000e 	b	fd4 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     f98:	ebffff3a 	bl	c88 <FPGA_Audio_ISR>
     f9c:	ea00000c 	b	fd4 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     fa0:	ebffff39 	bl	c8c <FPGA_PS2_ISR>
     fa4:	ea00000a 	b	fd4 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     fa8:	ebffff38 	bl	c90 <FPGA_JTAG_ISR>
     fac:	ea000008 	b	fd4 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     fb0:	ebffff37 	bl	c94 <FPGA_IrDA_ISR>
     fb4:	ea000006 	b	fd4 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     fb8:	ebffff36 	bl	c98 <FPGA_JP1_ISR>
     fbc:	ea000004 	b	fd4 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     fc0:	ebffff35 	bl	c9c <FPGA_JP2_ISR>
     fc4:	ea000002 	b	fd4 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     fc8:	ebffff34 	bl	ca0 <FPGA_PS2_DUAL_ISR>
     fcc:	ea000000 	b	fd4 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     fd0:	eafffffe 	b	fd0 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     fd4:	e30c3110 	movw	r3, #49424	; 0xc110
     fd8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     fdc:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     fe0:	e5832000 	str	r2, [r3]
}
     fe4:	e24bd018 	sub	sp, r11, #24
     fe8:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000fec <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     fec:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ff0:	e28db000 	add	r11, sp, #0
	while(1);
     ff4:	eafffffe 	b	ff4 <__cs3_reset+0x8>

00000ff8 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     ff8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ffc:	e28db000 	add	r11, sp, #0
	while(1);
    1000:	eafffffe 	b	1000 <__cs3_isr_undef+0x8>

00001004 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
    1004:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1008:	e28db000 	add	r11, sp, #0
	while(1);
    100c:	eafffffe 	b	100c <__cs3_isr_swi+0x8>

00001010 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
    1010:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1014:	e28db000 	add	r11, sp, #0
	while(1);
    1018:	eafffffe 	b	1018 <__cs3_isr_pabort+0x8>

0000101c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
    101c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1020:	e28db000 	add	r11, sp, #0
	while(1);
    1024:	eafffffe 	b	1024 <__cs3_isr_dabort+0x8>

00001028 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
    1028:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    102c:	e28db000 	add	r11, sp, #0
	while(1);
    1030:	eafffffe 	b	1030 <__cs3_isr_fiq+0x8>

00001034 <fix_bug>:
}

void fix_bug() {
    1034:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
    1038:	e28db000 	add	r11, sp, #0
    103c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
    1040:	e30d3198 	movw	r3, #53656	; 0xd198
    1044:	e34f3ffe 	movt	r3, #65534	; 0xfffe
    1048:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
    104c:	e51b3008 	ldr	r3, [r11, #-8]
    1050:	e3a02703 	mov	r2, #786432	; 0xc0000
    1054:	e5832000 	str	r2, [r3]
}
    1058:	e28bd000 	add	sp, r11, #0
    105c:	e8bd0800 	ldmfd	sp!, {r11}
    1060:	e12fff1e 	bx	lr

00001064 <int_setup>:

void int_setup(int len, int* IDs) {
    1064:	e92d4800 	push	{r11, lr}
    1068:	e28db004 	add	r11, sp, #4
    106c:	e24dd008 	sub	sp, sp, #8
    1070:	e50b0008 	str	r0, [r11, #-8]
    1074:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
    1078:	ebffff0e 	bl	cb8 <disable_A9_interrupts>
	set_A9_IRQ_stack();
    107c:	ebffff21 	bl	d08 <set_A9_IRQ_stack>
	fix_bug();
    1080:	ebffffeb 	bl	1034 <fix_bug>
	config_GIC(len, IDs);
    1084:	e51b0008 	ldr	r0, [r11, #-8]
    1088:	e51b100c 	ldr	r1, [r11, #-12]
    108c:	ebffff5b 	bl	e00 <config_GIC>
	enable_A9_interrupts();
    1090:	ebffff12 	bl	ce0 <enable_A9_interrupts>
    1094:	e24bd004 	sub	sp, r11, #4
    1098:	e8bd8800 	pop	{r11, pc}

0000109c <atexit>:
    109c:	e1a01000 	mov	r1, r0
    10a0:	e3a00000 	mov	r0, #0
    10a4:	e92d4008 	push	{r3, lr}
    10a8:	e1a02000 	mov	r2, r0
    10ac:	e1a03000 	mov	r3, r0
    10b0:	eb00000e 	bl	10f0 <__register_exitproc>
    10b4:	e8bd4008 	pop	{r3, lr}
    10b8:	e12fff1e 	bx	lr

000010bc <exit>:
    10bc:	e92d4008 	push	{r3, lr}
    10c0:	e3a01000 	mov	r1, #0
    10c4:	e1a04000 	mov	r4, r0
    10c8:	eb000045 	bl	11e4 <__call_exitprocs>
    10cc:	e59f3018 	ldr	r3, [pc, #24]	; 10ec <exit+0x30>
    10d0:	e5930000 	ldr	r0, [r3]
    10d4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    10d8:	e3530000 	cmp	r3, #0
    10dc:	11a0e00f 	movne	lr, pc
    10e0:	112fff13 	bxne	r3
    10e4:	e1a00004 	mov	r0, r4
    10e8:	eb0000c9 	bl	1414 <_exit>
    10ec:	000014bc 	.word	0x000014bc

000010f0 <__register_exitproc>:
    10f0:	e59fc0e4 	ldr	r12, [pc, #228]	; 11dc <__register_exitproc+0xec>
    10f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    10f8:	e59c4000 	ldr	r4, [r12]
    10fc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1100:	e35c0000 	cmp	r12, #0
    1104:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    1108:	e59c5004 	ldr	r5, [r12, #4]
    110c:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1110:	e355001f 	cmp	r5, #31
    1114:	e24dd010 	sub	sp, sp, #16
    1118:	e1a06000 	mov	r6, r0
    111c:	da000015 	ble	1178 <__register_exitproc+0x88>
    1120:	e59f00b8 	ldr	r0, [pc, #184]	; 11e0 <__register_exitproc+0xf0>
    1124:	e3500000 	cmp	r0, #0
    1128:	1a000001 	bne	1134 <__register_exitproc+0x44>
    112c:	e3e00000 	mvn	r0, #0
    1130:	ea000018 	b	1198 <__register_exitproc+0xa8>
    1134:	e3a00e19 	mov	r0, #400	; 0x190
    1138:	e58d100c 	str	r1, [sp, #12]
    113c:	e58d2008 	str	r2, [sp, #8]
    1140:	e58d3004 	str	r3, [sp, #4]
    1144:	e320f000 	nop	{0}
    1148:	e250c000 	subs	r12, r0, #0
    114c:	e59d100c 	ldr	r1, [sp, #12]
    1150:	e59d2008 	ldr	r2, [sp, #8]
    1154:	e59d3004 	ldr	r3, [sp, #4]
    1158:	0afffff3 	beq	112c <__register_exitproc+0x3c>
    115c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1160:	e3a00000 	mov	r0, #0
    1164:	e58c0004 	str	r0, [r12, #4]
    1168:	e58c5000 	str	r5, [r12]
    116c:	e584c148 	str	r12, [r4, #328]	; 0x148
    1170:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1174:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    1178:	e3560000 	cmp	r6, #0
    117c:	e59c4004 	ldr	r4, [r12, #4]
    1180:	1a000007 	bne	11a4 <__register_exitproc+0xb4>
    1184:	e2843002 	add	r3, r4, #2
    1188:	e2844001 	add	r4, r4, #1
    118c:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1190:	e58c4004 	str	r4, [r12, #4]
    1194:	e3a00000 	mov	r0, #0
    1198:	e28dd010 	add	sp, sp, #16
    119c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    11a0:	e12fff1e 	bx	lr
    11a4:	e3a00001 	mov	r0, #1
    11a8:	e1a00410 	lsl	r0, r0, r4
    11ac:	e08c8104 	add	r8, r12, r4, lsl #2
    11b0:	e3560002 	cmp	r6, #2
    11b4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    11b8:	e5883108 	str	r3, [r8, #264]	; 0x108
    11bc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    11c0:	e1877000 	orr	r7, r7, r0
    11c4:	01830000 	orreq	r0, r3, r0
    11c8:	e1a05008 	mov	r5, r8
    11cc:	e5882088 	str	r2, [r8, #136]	; 0x88
    11d0:	e58c7188 	str	r7, [r12, #392]	; 0x188
    11d4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    11d8:	eaffffe9 	b	1184 <__register_exitproc+0x94>
    11dc:	000014bc 	.word	0x000014bc
    11e0:	00000000 	.word	0x00000000

000011e4 <__call_exitprocs>:
    11e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    11e8:	e59f3168 	ldr	r3, [pc, #360]	; 1358 <__call_exitprocs+0x174>
    11ec:	e5933000 	ldr	r3, [r3]
    11f0:	e24dd014 	sub	sp, sp, #20
    11f4:	e58d3004 	str	r3, [sp, #4]
    11f8:	e2833f52 	add	r3, r3, #328	; 0x148
    11fc:	e58d0008 	str	r0, [sp, #8]
    1200:	e58d300c 	str	r3, [sp, #12]
    1204:	e1a07001 	mov	r7, r1
    1208:	e3a08001 	mov	r8, #1
    120c:	e59d3004 	ldr	r3, [sp, #4]
    1210:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1214:	e3560000 	cmp	r6, #0
    1218:	e59db00c 	ldr	r11, [sp, #12]
    121c:	0a000033 	beq	12f0 <__call_exitprocs+0x10c>
    1220:	e5965004 	ldr	r5, [r6, #4]
    1224:	e2554001 	subs	r4, r5, #1
    1228:	5286a088 	addpl	r10, r6, #136	; 0x88
    122c:	5285501f 	addpl	r5, r5, #31
    1230:	508a5105 	addpl	r5, r10, r5, lsl #2
    1234:	5a000007 	bpl	1258 <__call_exitprocs+0x74>
    1238:	ea000029 	b	12e4 <__call_exitprocs+0x100>
    123c:	e5953000 	ldr	r3, [r5]
    1240:	e1530007 	cmp	r3, r7
    1244:	0a000005 	beq	1260 <__call_exitprocs+0x7c>
    1248:	e2444001 	sub	r4, r4, #1
    124c:	e3740001 	cmn	r4, #1
    1250:	e2455004 	sub	r5, r5, #4
    1254:	0a000022 	beq	12e4 <__call_exitprocs+0x100>
    1258:	e3570000 	cmp	r7, #0
    125c:	1afffff6 	bne	123c <__call_exitprocs+0x58>
    1260:	e5963004 	ldr	r3, [r6, #4]
    1264:	e06a2005 	rsb	r2, r10, r5
    1268:	e2433001 	sub	r3, r3, #1
    126c:	e0862002 	add	r2, r6, r2
    1270:	e1530004 	cmp	r3, r4
    1274:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    1278:	13a01000 	movne	r1, #0
    127c:	05864004 	streq	r4, [r6, #4]
    1280:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1284:	e3530000 	cmp	r3, #0
    1288:	0affffee 	beq	1248 <__call_exitprocs+0x64>
    128c:	e1a02418 	lsl	r2, r8, r4
    1290:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1294:	e1120001 	tst	r2, r1
    1298:	e5969004 	ldr	r9, [r6, #4]
    129c:	0a000016 	beq	12fc <__call_exitprocs+0x118>
    12a0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    12a4:	e1120001 	tst	r2, r1
    12a8:	1a000016 	bne	1308 <__call_exitprocs+0x124>
    12ac:	e59d0008 	ldr	r0, [sp, #8]
    12b0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    12b4:	e1a0e00f 	mov	lr, pc
    12b8:	e12fff13 	bx	r3
    12bc:	e5963004 	ldr	r3, [r6, #4]
    12c0:	e1530009 	cmp	r3, r9
    12c4:	1affffd0 	bne	120c <__call_exitprocs+0x28>
    12c8:	e59b3000 	ldr	r3, [r11]
    12cc:	e1530006 	cmp	r3, r6
    12d0:	1affffcd 	bne	120c <__call_exitprocs+0x28>
    12d4:	e2444001 	sub	r4, r4, #1
    12d8:	e3740001 	cmn	r4, #1
    12dc:	e2455004 	sub	r5, r5, #4
    12e0:	1affffdc 	bne	1258 <__call_exitprocs+0x74>
    12e4:	e59f1070 	ldr	r1, [pc, #112]	; 135c <__call_exitprocs+0x178>
    12e8:	e3510000 	cmp	r1, #0
    12ec:	1a000009 	bne	1318 <__call_exitprocs+0x134>
    12f0:	e28dd014 	add	sp, sp, #20
    12f4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    12f8:	e12fff1e 	bx	lr
    12fc:	e1a0e00f 	mov	lr, pc
    1300:	e12fff13 	bx	r3
    1304:	eaffffec 	b	12bc <__call_exitprocs+0xd8>
    1308:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    130c:	e1a0e00f 	mov	lr, pc
    1310:	e12fff13 	bx	r3
    1314:	eaffffe8 	b	12bc <__call_exitprocs+0xd8>
    1318:	e5963004 	ldr	r3, [r6, #4]
    131c:	e3530000 	cmp	r3, #0
    1320:	e5963000 	ldr	r3, [r6]
    1324:	1a000008 	bne	134c <__call_exitprocs+0x168>
    1328:	e3530000 	cmp	r3, #0
    132c:	0a000006 	beq	134c <__call_exitprocs+0x168>
    1330:	e1a00006 	mov	r0, r6
    1334:	e58b3000 	str	r3, [r11]
    1338:	e320f000 	nop	{0}
    133c:	e59b6000 	ldr	r6, [r11]
    1340:	e3560000 	cmp	r6, #0
    1344:	1affffb5 	bne	1220 <__call_exitprocs+0x3c>
    1348:	eaffffe8 	b	12f0 <__call_exitprocs+0x10c>
    134c:	e1a0b006 	mov	r11, r6
    1350:	e1a06003 	mov	r6, r3
    1354:	eafffff9 	b	1340 <__call_exitprocs+0x15c>
    1358:	000014bc 	.word	0x000014bc
    135c:	00000000 	.word	0x00000000

00001360 <register_fini>:
    1360:	e92d4008 	push	{r3, lr}
    1364:	e59f3010 	ldr	r3, [pc, #16]	; 137c <register_fini+0x1c>
    1368:	e3530000 	cmp	r3, #0
    136c:	159f000c 	ldrne	r0, [pc, #12]	; 1380 <register_fini+0x20>
    1370:	1bffff49 	blne	109c <atexit>
    1374:	e8bd4008 	pop	{r3, lr}
    1378:	e12fff1e 	bx	lr
    137c:	000014e4 	.word	0x000014e4
    1380:	00001384 	.word	0x00001384

00001384 <__libc_fini_array>:
    1384:	e92d4038 	push	{r3, r4, r5, lr}
    1388:	e59f5030 	ldr	r5, [pc, #48]	; 13c0 <__libc_fini_array+0x3c>
    138c:	e59f4030 	ldr	r4, [pc, #48]	; 13c4 <__libc_fini_array+0x40>
    1390:	e0654004 	rsb	r4, r5, r4
    1394:	e1b04144 	asrs	r4, r4, #2
    1398:	10855104 	addne	r5, r5, r4, lsl #2
    139c:	0a000004 	beq	13b4 <__libc_fini_array+0x30>
    13a0:	e5353004 	ldr	r3, [r5, #-4]!
    13a4:	e1a0e00f 	mov	lr, pc
    13a8:	e12fff13 	bx	r3
    13ac:	e2544001 	subs	r4, r4, #1
    13b0:	1afffffa 	bne	13a0 <__libc_fini_array+0x1c>
    13b4:	eb00004a 	bl	14e4 <__libc_fini>
    13b8:	e8bd4038 	pop	{r3, r4, r5, lr}
    13bc:	e12fff1e 	bx	lr
    13c0:	000014fc 	.word	0x000014fc
    13c4:	00001500 	.word	0x00001500

000013c8 <__cs3_premain>:
    13c8:	e92d4008 	push	{r3, lr}
    13cc:	eb000017 	bl	1430 <__libc_init_array>
    13d0:	e59f3030 	ldr	r3, [pc, #48]	; 1408 <__cs3_premain+0x40>
    13d4:	e3530000 	cmp	r3, #0
    13d8:	15930000 	ldrne	r0, [r3]
    13dc:	01a00003 	moveq	r0, r3
    13e0:	e59f3024 	ldr	r3, [pc, #36]	; 140c <__cs3_premain+0x44>
    13e4:	e3530000 	cmp	r3, #0
    13e8:	15931000 	ldrne	r1, [r3]
    13ec:	01a01003 	moveq	r1, r3
    13f0:	e3a02000 	mov	r2, #0
    13f4:	ebfffb98 	bl	25c <main>
    13f8:	e59f3010 	ldr	r3, [pc, #16]	; 1410 <__cs3_premain+0x48>
    13fc:	e3530000 	cmp	r3, #0
    1400:	1bffff2d 	blne	10bc <exit>
    1404:	eafffffe 	b	1404 <__cs3_premain+0x3c>
	...
    1410:	000010bc 	.word	0x000010bc

00001414 <_exit>:
    1414:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1418:	e3a00018 	mov	r0, #24
    141c:	e59f1004 	ldr	r1, [pc, #4]	; 1428 <_exit+0x14>
    1420:	ef123456 	svc	0x00123456
    1424:	eafffffe 	b	1424 <_exit+0x10>
    1428:	00020026 	.word	0x00020026

0000142c <__cs3_isr_interrupt>:
    142c:	eafffffe 	b	142c <__cs3_isr_interrupt>

00001430 <__libc_init_array>:
    1430:	e92d4070 	push	{r4, r5, r6, lr}
    1434:	e59f506c 	ldr	r5, [pc, #108]	; 14a8 <__libc_init_array+0x78>
    1438:	e59f606c 	ldr	r6, [pc, #108]	; 14ac <__libc_init_array+0x7c>
    143c:	e0656006 	rsb	r6, r5, r6
    1440:	e1b06146 	asrs	r6, r6, #2
    1444:	12455004 	subne	r5, r5, #4
    1448:	13a04000 	movne	r4, #0
    144c:	0a000005 	beq	1468 <__libc_init_array+0x38>
    1450:	e5b53004 	ldr	r3, [r5, #4]!
    1454:	e2844001 	add	r4, r4, #1
    1458:	e1a0e00f 	mov	lr, pc
    145c:	e12fff13 	bx	r3
    1460:	e1560004 	cmp	r6, r4
    1464:	1afffff9 	bne	1450 <__libc_init_array+0x20>
    1468:	e59f5040 	ldr	r5, [pc, #64]	; 14b0 <__libc_init_array+0x80>
    146c:	e59f6040 	ldr	r6, [pc, #64]	; 14b4 <__libc_init_array+0x84>
    1470:	e0656006 	rsb	r6, r5, r6
    1474:	eb000012 	bl	14c4 <_init>
    1478:	e1b06146 	asrs	r6, r6, #2
    147c:	12455004 	subne	r5, r5, #4
    1480:	13a04000 	movne	r4, #0
    1484:	0a000005 	beq	14a0 <__libc_init_array+0x70>
    1488:	e5b53004 	ldr	r3, [r5, #4]!
    148c:	e2844001 	add	r4, r4, #1
    1490:	e1a0e00f 	mov	lr, pc
    1494:	e12fff13 	bx	r3
    1498:	e1560004 	cmp	r6, r4
    149c:	1afffff9 	bne	1488 <__libc_init_array+0x58>
    14a0:	e8bd4070 	pop	{r4, r5, r6, lr}
    14a4:	e12fff1e 	bx	lr
    14a8:	000014dc 	.word	0x000014dc
    14ac:	000014dc 	.word	0x000014dc
    14b0:	000014dc 	.word	0x000014dc
    14b4:	000014e4 	.word	0x000014e4

Disassembly of section .rodata:

000014bc <_global_impure_ptr>:
    14bc:	00001528 00000043                       (...C...

000014c4 <_init>:
    14c4:	e1a0c00d 	mov	r12, sp
    14c8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    14cc:	e24cb004 	sub	r11, r12, #4
    14d0:	e24bd028 	sub	sp, r11, #40	; 0x28
    14d4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    14d8:	e12fff1e 	bx	lr

000014dc <__init_array_start>:
    14dc:	00001360 	.word	0x00001360

000014e0 <__frame_dummy_init_array_entry>:
    14e0:	00000208                                ....

000014e4 <__libc_fini>:
    14e4:	e1a0c00d 	mov	r12, sp
    14e8:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    14ec:	e24cb004 	sub	r11, r12, #4
    14f0:	e24bd028 	sub	sp, r11, #40	; 0x28
    14f4:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    14f8:	e12fff1e 	bx	lr

000014fc <__fini_array_start>:
    14fc:	000001c4 	.word	0x000001c4

00001500 <__cs3_regions>:
    1500:	00000000 	.word	0x00000000
    1504:	00000040 	.word	0x00000040
    1508:	00000040 	.word	0x00000040
    150c:	00001918 	.word	0x00001918
    1510:	00000020 	.word	0x00000020

00001514 <__cs3_regions_end>:
    1514:	00000000 	.word	0x00000000
